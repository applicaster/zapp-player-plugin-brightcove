fastlane_require 'fileutils'
fastlane_require 'json'

default_platform(:ios)

POD_NAME = "BrightcovePlayerPlugin"
SOURCES_DIR = "BrightcovePlayer"
PODSPEC = "#{POD_NAME}.podspec"
PODSPEC_PATH = "../#{PODSPEC}"
SPECS_PATH = "../Specs/#{POD_NAME}"
MANIFEST_PATH = "#{SOURCES_DIR}/plugin_manifest.json"

platform :ios do
  desc "Release new version of #{POD_NAME} plugin. Updates podspec and manifest file."
  
  lane :release do |options|
    new_version = options[:version]
    raise "You should specify version number that will be released" unless new_version != nil

    current_version = version_get_podspec(path: PODSPEC_PATH)
    raise "Version value should be higher then current podspec version" unless Gem::Version.new(new_version) > Gem::Version.new(current_version)

    version_bump_podspec(path: PODSPEC_PATH, version_number: new_version)
    full_specs_path = "#{SPECS_PATH}/#{new_version}/#{PODSPEC}"

    Dir.chdir ".." do
      copy_with_path(PODSPEC_PATH, full_specs_path)
      bump_manifest_version(new_version)
    end

    git_commit(path: [PODSPEC_PATH, MANIFEST_PATH, "#{SPECS_PATH}/*"], message: "Bump plugin to #{new_version}")
    push_to_git_remote
  end

  def copy_with_path(src, dst)
    FileUtils.mkdir_p(File.dirname(dst))
    FileUtils.cp(src, dst)
  end

  def bump_manifest_version(version)
    data_hash = load_json(MANIFEST_PATH)
    data_hash["manifest_version"] = version
    data_hash["dependency_version"] = version
    write_to_json(data_hash, MANIFEST_PATH)
  end

  def load_json(filename)
    file = File.read(filename)
    data_hash = JSON.parse(file)
    data_hash
  end

  def write_to_json(data_hash, filename)
    json = JSON.pretty_generate(data_hash)
    fJson = File.open(filename,"w")
    fJson.write(json)
    fJson.close
  end
end
